Tutorial: https://www.youtube.com/watch?v=7t2alSnE2-I
Deploy with: Deta.sh
TablePlus app: https://tableplus.com/windows
http://127.0.0.1:8000/docs

> python3 -m venv fastapi-env
> cd fastapi-env
> fastapi-env\Scripts\activate.bat 
> pip3 install fastapi
> python3 -m pip install --upgrade pip
> pip3 install uvicorn
> pip3 install SQLAlchemy (latest)
pip install SQLAlchemy==1.3.24
pip3 uninstall SQLAlchemy==1.3.24 (con esta no me anduvo, tuve que usar la ultima version)
pip3 install -r requirements.txt

f-string formatting
f'mi super string {variable}'

para poder debugear el archivo principal se debe llamar main.py

crea un folder Blog, y adentro un __init__.py vacio.
Y se crea un main.py adentro. Para arrancar ese main hay que hacer

uvicorn blog.main:app --reload

NOTA: No me anduvo el virtual environment. Lo corro sin Activate y anda.

Schemas: Se puede crear un archivo schemas.py para tener las clases de Entidad
luego se importan como

from . import schemas
y luego los parametros son de la forma blog:schemas.Blog

** SQL Alchemy

NOTA: si no te encuentra las referencias tenes que ir a Python: select interpreter y ver en cual python.exe se instalo. Hace conflicto con el virtual env
y lo instalado localmente.

*** Response Model
Con Response model podemos filtrar la salida del response, para no retornar todos los datos
Se pone el parametro response_model y se crea la clase BlogResponse

@app.get('/blog', response_model=List[schemas.BlogResponse])

class BlogResponse(BaseModel):
    title: str
    body: str

    class Config():
        orm_mode = True

*** Hashing
NOTA: A veces da error el import.. hacer requirements.txt varias veces y agarra.
from passlib.context import CryptContext
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
hashed_password = pwd_context.hash(request.password)

*** OpenApi Metadata
Se pueden agrupar los servicios usando tags=["blogs"]
@app.post('/blog', status_code=status.HTTP_201_CREATED, tags=['blogs'])

*** ORM Relashionsip

* Tabla Blog, tiene un creador
user_id = Column(Integer, ForeignKey('users.id'))
creator = relashionsip("User", back_populates="blogs")

* Tabla User tiene una lista de blogs
blogs = relationship("Blog", back_populates="creator")